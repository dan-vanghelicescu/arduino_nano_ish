#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> 
#include <SPI.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <VirtualWire.h>  

byte message[VW_MAX_MESSAGE_LEN]; // a buffer to store the incoming messages  
byte messageLength = VW_MAX_MESSAGE_LEN; // the size of the message  

#define TFT_DC   14
#define TFT_CS   15
#define TFT_RST   0
#define TFT_SCLK 19 
#define TFT_MOSI 18 

#define ONE_WIRE_BUS 12
OneWire oneWire(ONE_WIRE_BUS);	
DallasTemperature sensors(&oneWire);

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);
//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

void setup() {
  vw_setup(300); // Bits per sec  
  vw_set_rx_pin(11);
  vw_rx_start(); // Start the receiver  

  Serial.begin(9600);
  Serial.print("Hello!\n");

  sensors.begin();

  pinMode(LED_BUILTIN, OUTPUT);
  
  tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST7735_BLACK);
  //testdrawtext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST7735_WHITE);
}

char S[10];
int ts=0;
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(500);
  digitalWrite(LED_BUILTIN, LOW);
  delay(500);
  
  sensors.requestTemperatures(); 

  dtostrf(sensors.getTempCByIndex(0), 7,  3, S);

  Serial.print((String)ts++ + " temp=" + (String)S + "\n");

  testdrawtext(S, ST7735_YELLOW, 3);

  // testdrawcircles(20, ST77XX_GREEN);
  //testfastlines(ST77XX_RED, ST77XX_BLUE);
  //testroundrects();

  if (vw_get_message(message, &messageLength)) // Non-blocking  
  {  
    Serial.print("Am receptionat mesajul: ");  
    for (int i = 0; i < messageLength; i++)  
    {  
      Serial.write(message[i]);  
    }  
    Serial.println();  
    testroundrects();
  }
}

void testroundrects() {
  tft.fillScreen(ST77XX_BLACK);
  uint16_t color = 100;
  int i;
  int t;
  for(t = 0 ; t <= 4; t+=1) {
    int x = 0;
    int y = 0;
    int w = tft.width()-2;
    int h = tft.height()-2;
    for(i = 0 ; i <= 16; i+=1) {
      tft.drawRoundRect(x, y, w, h, 5, color);
      x+=2;
      y+=3;
      w-=4;
      h-=6;
      color+=1100;
    }
    color+=100;
  }
}

// void testtriangles() {
//   tft.fillScreen(ST77XX_BLACK);
//   uint16_t color = 0xF800;
//   int t;
//   int w = tft.width()/2;
//   int x = tft.height()-1;
//   int y = 0;
//   int z = tft.width();
//   for(t = 0 ; t <= 15; t++) {
//     tft.drawTriangle(w, y, y, x, z, x, color);
//     x-=4;
//     y+=4;
//     z-=4;
//     color+=100;
//   }
// }

void testdrawtext(char *text, uint16_t color, uint8_t size) {
  tft.fillScreen(ST7735_BLACK);
  tft.setCursor(0, 40);
  tft.setTextColor(color);
  tft.setTextWrap(true);
  tft.setTextSize(size);
  tft.print(text);
}

// void testdrawcircles(uint8_t radius, uint16_t color) {
//   for (int16_t x=0; x < tft.width()+radius; x+=radius*2) {
//     for (int16_t y=0; y < tft.height()+radius; y+=radius*2) {
//       tft.drawCircle(x, y, radius, color);
//     }
//   }
// }

// void testfastlines(uint16_t color1, uint16_t color2) {
//   tft.fillScreen(ST77XX_BLACK);
//   for (int16_t y=0; y < tft.height(); y+=5) {
//     tft.drawFastHLine(0, y, tft.width(), color1);
//   }
//   for (int16_t x=0; x < tft.width(); x+=5) {
//     tft.drawFastVLine(x, 0, tft.height(), color2);
//   }
// }



